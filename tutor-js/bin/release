#!/bin/bash

set -e

PURPLE=$'\e[35m'
NO_COLOR=$'\e[0m'

REMOTE='origin'

project_release_branch="release/$1"
project_release_subdirectory="$1/dist"
project_remote_subtree="--squash --prefix=$project_release_subdirectory $REMOTE $project_release_branch"

current_branch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')

# http://stackoverflow.com/questions/2320564/variations-of-sed-between-osx-and-gnu-linux#38595160
sedi () {
  sed --version >/dev/null 2>&1 && sed -i -- "$@" || sed -i "" "$@"
}

if [ `git branch --list $project_release_branch` ]; then
  git checkout $project_release_branch
  if [ -d "$project_release_subdirectory" ]; then
    git subtree pull $project_remote_subtree
  fi
  echo "${PURPLE}Branch $project_release_branch already exists.${NO_COLOR}"
else
  git checkout -b $project_release_branch
  sedi '/dist/d' .gitignore
  git add .gitignore
  git commit -m 'allow dist files'
  echo "${PURPLE}Updating .gitignore.${NO_COLOR}"

  [ -d $project_release_subdirectory ] && rm -r $project_release_subdirectory

  git subtree add $project_remote_subtree
  echo "${PURPLE}Branch $project_release_branch created.${NO_COLOR}"
fi

echo "${PURPLE}Merging in latest updates from $current_branch.${NO_COLOR}"
git merge $current_branch -m "merge $current_branch in prep for release"

echo "${PURPLE}Updating and building.${NO_COLOR}"
yarn install
bin/build "$@"

if [[ `git status --porcelain` ]]; then
  echo "${PURPLE}Changes detected in build.${NO_COLOR}"

  git add $project_release_subdirectory

  read -p "${PURPLE}Please enter a commit message: ${NO_COLOR}" commit_message
  git commit -m "$commit_message"
  git subtree push $project_remote_subtree
fi

echo "${PURPLE}Done with build, $project_release_branch is up to date.${NO_COLOR}"
echo "${PURPLE}Please draft a release off of $project_release_branch on GitHub to complete release.${NO_COLOR}"

git checkout $current_branch
